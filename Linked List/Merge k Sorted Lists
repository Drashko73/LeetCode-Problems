struct ListNode *LinkList(struct ListNode *head, int *array, int size)
{
    int i;
    struct ListNode *pom;
    struct ListNode *NewElement;
    
    for(i=0;i<size;i++)
    {
        NewElement = (struct ListNode*)malloc(sizeof(struct ListNode));
        NewElement->val = array[i];
        NewElement->next = NULL;
        
        if(head == NULL)
            head = NewElement;
        else
        {
            pom = head;
            while(pom->next != NULL)
                pom = pom->next;
            pom->next = NewElement;
        }
    }
    return head;
}
int CountNodes(struct ListNode *head)
{
    int num = 0;
    struct ListNode *pom;
    
    pom = head;
    while(pom != NULL)
    {
        ++num;
        pom = pom->next;
    }
    return num;
}
int FindSize(struct ListNode **lists, int NumOfLists)
{
    int i;
    int size = 0;
    
    for(i=0;i<NumOfLists;i++)
        size = size + CountNodes(*(lists+i));
    return size;
}
void FillArray(int *array, struct ListNode **nodes, int listsSize)
{
    int i,j;
    struct ListNode *pom;
    
    j = 0;
    for(i=0;i<listsSize;i++)
    {
        pom = *(nodes+i);
        while(pom != NULL)
        {
            array[j] = pom->val;
            j++;
            pom = pom->next;
        }
    }
}
void Swap(int *arr, int position1, int position2)
{
    int pom;
    pom = arr[position1];
    arr[position1] = arr[position2];
    arr[position2] = pom;
}

int Divide(int *array, int left, int right)
{
    int pivot, position,i;
    
    pivot = array[left];
    position = left;
    for(i=left+1;i<right;i++)
    {
        if(array[i] < pivot)
        {
            position++;
            Swap(array,i,position);
        }
    }
    Swap(array,left,position);
    return position;
}

void QuickSort(int *array, int low, int high)
{
    int mid;
    
    if(low < high)
    {
        mid = Divide(array,low,high);
        
        QuickSort(array,low,mid);
        QuickSort(array,mid+1,high);
    }
}
struct ListNode* mergeKLists(struct ListNode** lists, int listsSize){
    int i,arraySize;
    int *array;
    struct ListNode *newHead;
    
    if(listsSize == 0)
        return NULL;
    
    arraySize = FindSize(lists,listsSize);
    
    array = (int*)malloc(arraySize*sizeof(int));
    FillArray(array,lists,listsSize);
    QuickSort(array,0,arraySize);
    
    newHead = NULL;
    newHead = LinkList(newHead,array,arraySize);
    free(array);
    return newHead;
}
