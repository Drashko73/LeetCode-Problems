/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
struct Node{
    int val;
    int balance;
    struct Node *left, *right;
};

int dp(struct Node *root)
{
    if(root == NULL) return 0;
    
    int dl = 0, dr = 0;
    dl = dp(root->left);
    dr = dp(root->right);
    return (dl > dr)? dl+1:dr+1;
}

void rightRotate(struct Node **root)
{
    struct Node *pomLeft, *pomRight;
    
    pomRight = *root;
    pomLeft = pomRight->left;
    pomRight->left = pomLeft->right;
    pomLeft->right = pomRight;
    *root = pomLeft;
    
    pomLeft->balance = dp(pomLeft->right) - dp(pomLeft->left);
    pomRight->balance = dp(pomRight->right) - dp(pomRight->left);
}
void leftRotate(struct Node **root)
{
    struct Node *pomLeft, *pomRight;
    
    pomLeft = *root;
    pomRight = pomLeft->right;
    pomLeft->right = pomRight->left;
    pomRight->left = pomLeft;
    *root = pomRight;
    
    pomLeft->balance = dp(pomLeft->right) - dp(pomLeft->left);
    pomRight->balance = dp(pomRight->right) - dp(pomRight->left);
}

int insertInTree(struct Node **root, struct Node *newNode)
{
    if(*root == NULL)
    {
        *root = newNode;
        return 1;
    }
    
    int inc;
    
    if(newNode->val > (*root)->val)
        inc = insertInTree(&((*root)->right),newNode);
    else
        inc = -insertInTree(&((*root)->left),newNode);
    
    (*root)->balance += inc;
    if(inc != 0 && (*root)->balance != 0)
    {
        if((*root)->balance < -1)
        {
            if((*root)->left->balance < 0)
                rightRotate(root);
            else
            {
                leftRotate(&((*root)->left));
                rightRotate(root);
            }
        }
        else if((*root)->balance > 1)
        {
            if((*root)->right->balance > 0)
                leftRotate(root);
            else
            {
                rightRotate(&((*root)->right));
                leftRotate(root);
            }
        }
        else
            return 1;
        
    }
    return 0;
}

struct Node *MakeTree(struct ListNode **head)
{
    struct ListNode *pom = *head;
    struct Node *root = NULL, *newNode;
    
    while(pom)
    {
        newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->val = pom->val;
        newNode->balance = 0;
        newNode->left = newNode->right = NULL;
        
        insertInTree(&root,newNode);
        
        pom = pom->next;
    }
    return root;
}

struct TreeNode* sortedListToBST(struct ListNode* head){
    struct Node *root;
    root = MakeTree(&head);
    return root;
}
