struct Node{
    int val;
    int balance;
    struct Node *left, *right;
};

struct Node *alocate(int value)
{
    struct Node *new = (struct Node*)malloc(sizeof(struct Node));
    new->val = value;
    new->balance = 0;
    new->left = new->right = NULL;
    return new;
}

int depthOfTree(struct TreeNode *root)
{
    if(!root) return 0;
    
    int dl = 0, dr = 0;
    
    dl = depthOfTree(root->left);
    dr = depthOfTree(root->right);
    
    return (dl > dr)? dl + 1: dr + 1;
}

void rightRotate(struct Node **root)
{
    struct Node *pomleft, *pomright;
    
    pomright = *root;
    pomleft = pomright->left;
    pomright->left = pomleft->right;
    pomleft->right = pomright;
    *root = pomleft;
    
    pomleft->balance = depthOfTree(pomleft->right) - depthOfTree(pomleft->left);
    pomright->balance = depthOfTree(pomright->right) - depthOfTree(pomright->left);
}

void leftRotate(struct Node **root)
{
    struct Node *pomLeft, *pomRight;
    
    pomLeft = *root;
    pomRight = pomLeft->right;
    pomLeft->right = pomRight->left;
    pomRight->left = pomLeft;
    *root = pomRight;
    
    pomRight->balance = depthOfTree(pomRight->right) - depthOfTree(pomRight->left);
    pomLeft->balance = depthOfTree(pomLeft->right) - depthOfTree(pomLeft->left);
}

int dodaj(struct Node **root, struct Node *newNode)
{
    if(*root == NULL)
    {
        *root = newNode;
        return 1;
    }
    
    int inc;
    
    if(newNode->val > (*root)->val)
        inc = dodaj(&((*root)->right),newNode);
    else
        inc = -dodaj(&((*root)->left),newNode);
    
    (*root)->balance += inc;
    
    if(inc != 0 && (*root)->balance != 0)
    {
        if((*root)->balance < -1)
        {
            if((*root)->left->balance < 0)
            {
                // right rotate
                rightRotate(root);
            }
            else
            {
                leftRotate(&((*root)->left));
                rightRotate(root);
            }
        }
        else if((*root)->balance > 1)
        {
            if((*root)->right->balance > 0)
            {
                leftRotate(root);
            }
            else
            {
                rightRotate(&((*root)->right));
                leftRotate(root);
            }
        }
        else
            return 1;
    }
    return 0;
}

struct TreeNode* sortedArrayToBST(int* nums, int numsSize){
    struct Node *root = NULL, *newNode;
    for(int i=0;i < numsSize; i++)
    {
        newNode = alocate(nums[i]);
        dodaj(&root,newNode);
    }
    return root;
}
