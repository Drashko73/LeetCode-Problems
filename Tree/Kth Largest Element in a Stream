class KthLargest {

private:
    TreeNode *makeTree(TreeNode *root, int value)
    {
        if(root == NULL)
        {
            TreeNode *newNode = (TreeNode*)malloc(sizeof(TreeNode));
            newNode->val = value;
            newNode->left = newNode->right = NULL;
            return newNode;
        }

        if(value < root->val) root->left = makeTree(root->left, value);
        else root->right = makeTree(root->right, value);

        return root;
    }

    int returnKthLargestElement(TreeNode *root, int *k, int *level)
    {
        if(!root) return -10001;

        int right = returnKthLargestElement(root->right, k, level);
        if(right != -10001) return right;
        
        (*level)++;
        if(*level == *k)
            return root->val;

        int left = returnKthLargestElement(root->left, k, level);
        if(left != -10001) return left;

        return -10001;
    }

public:
    int intK;
    vector <int> stream;
    TreeNode *root;

    KthLargest(int k, vector<int>& nums) {
        intK = k;
        stream = nums;
        root = NULL;
        for(int i = 0; i < nums.size(); i++)
            root = makeTree(root, nums[i]);
    }
    
    int add(int val) {
        stream.push_back(val);
        root = makeTree(root, val);
        int pom = intK;
        int level = 0;
        return returnKthLargestElement(root, &pom, &level);
    }
};

/**
 * Your KthLargest object will be instantiated and called as such:
 * KthLargest* obj = new KthLargest(k, nums);
 * int param_1 = obj->add(val);
 */
