struct Node{
    int val;
    int balance;
    struct Node *left, *right;
};

int numOfNodes(struct TreeNode *root)
{
    if(!root) return 0;
    return 1 + numOfNodes(root->left) + numOfNodes(root->right);
}

void MakeArray(struct TreeNode *root, int *array, int *position)
{
    if(root)
    {
        MakeArray(root->left,array,position);
        array[*position] = root->val;
        (*position)++;
        MakeArray(root->right,array,position);
    }
}

struct Node *alocate(int value)
{
    struct Node *new = (struct Node*)malloc(sizeof(struct Node));
    new->val = value;
    new->balance = 0;
    new->left = new->right = NULL;
    return new;
}

int dp(struct Node *root)
{
    if(!root) return 0;
    int dl = 0, dr = 0;
    
    dl = dp(root->left);
    dr = dp(root->right);
    return (dl > dr)? dl +1 : dr + 1;
}

void rightRotate(struct Node **root)
{
    struct Node *leftPom, *rightPom;
    
    rightPom = *root;
    leftPom = rightPom->left;
    rightPom->left = leftPom->right;
    leftPom->right = rightPom;
    *root = leftPom;
    
    leftPom->balance = dp(leftPom->right) - dp(leftPom->left);
    rightPom->balance = dp(rightPom->right) - dp(rightPom->left);
}

void leftRotate(struct Node **root)
{
    struct Node *leftPom, *rightPom;
    
    leftPom = *root;
    rightPom = leftPom->right;
    leftPom->right = rightPom->left;
    rightPom->left = leftPom;
    
    *root = rightPom;
    
    leftPom->balance = dp(leftPom->right) - dp(leftPom->left);
    rightPom->balance = dp(rightPom->right) - dp(rightPom->left);
    
}

int appendNewNode(struct Node **root, struct Node **newNode)
{
    if(*root == NULL)
    {
        *root = *newNode;
        return 1;
    }
    int increment;
    
    if((*newNode)->val > (*root)->val)
        increment = appendNewNode(&((*root)->right),newNode);
    else
        increment = -appendNewNode(&((*root)->left),newNode);
    
    (*root)->balance += increment;
    
    if(increment != 0 && (*root)->balance != 0)
    {
        if((*root)->balance < -1)
        {
            if((*root)->left->balance < 0)
            {
                rightRotate(root);
            }
            else
            {
                leftRotate(&((*root)->left));
                rightRotate(root);
            }
        }
        else if((*root)->balance > 1)
        {
            if((*root)->right->balance > 0)
            {
                leftRotate(root);
            }
            else
            {
                rightRotate(&((*root)->left));
                leftRotate(root);
            }
        }
        else
            return 1;
    }
    return 0;
}

struct TreeNode* balanceBST(struct TreeNode* root){
    int *array, size, position = 0;
    struct Node *newRoot = NULL, *newNode;
    size = numOfNodes(root);
    array = (int*)malloc(size*sizeof(int));
    
    MakeArray(root,array,&position);
    for(int i=0;i<size;i++)
    {
        newNode = alocate(array[i]);
        appendNewNode(&newRoot,&newNode);
    }
    free(array);
    return newRoot;
}
