int numOfNodes(struct TreeNode *root)
{
    if(!root) return 0;
    return 1 + numOfNodes(root->left) + numOfNodes(root->right);
}
int cmpfunc (const void * a, const void * b) {
   return ( *(int*)a - *(int*)b );
}
void GetArrays(struct TreeNode *root1, struct TreeNode *root2, int* a1, int *a2, int *p1, int *p2)
{
    if(root1 == NULL && root2 == NULL)
        return;
    
    if(root1 != NULL)
    {
        a1[*p1] = root1->val;
        (*p1)++;
    }
    if(root2 != NULL)
    {
        a2[*p2] = root2->val;
        (*p2)++;
    }
    if(root1 != NULL && root2 != NULL)
    {
        GetArrays(root1->left,root2->left,a1,a2,p1,p2);
        GetArrays(root1->right,root2->right,a1,a2,p1,p2);
    }
    else if(root1 != NULL && root2 == NULL)
    {
        GetArrays(root1->left,root2,a1,a2,p1,p2);
        GetArrays(root1->right,root2,a1,a2,p1,p2);
    }
    else
    {
        GetArrays(root1,root2->left,a1,a2,p1,p2);
        GetArrays(root1,root2->right,a1,a2,p1,p2);
    }
}

int* getAllElements(struct TreeNode* root1, struct TreeNode* root2, int* returnSize){
    int *array, *arr1, *arr2;
    int size1, size2, pos1 = 0, pos2 = 0, position;
    
    size1 = numOfNodes(root1);
    size2 = numOfNodes(root2);
    *returnSize = size1+size2;
    
    array = (int*)malloc(*returnSize * sizeof(int));
    arr1 = (int*)malloc(size1*sizeof(int));
    arr2 = (int*)malloc(size2*sizeof(int));
    
    GetArrays(root1,root2,arr1,arr2,&pos1,&pos2);
    
    for(position = 0;position < size1; position++)
        array[position] = arr1[position];
    for(pos1=0;pos1<size2;pos1++)
        array[position+pos1] = arr2[pos1];
    
    qsort(array, *returnSize, sizeof(int), cmpfunc);
    return array;
}
